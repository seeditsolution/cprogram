
//A library of all functions which can be used to solve problems in Number Theory in C

//include the appropriate header files "string.h" (for using memset()), "math.h" (to compute square root), "stdbool.h" to use boolean arrays


// 1. Binary Exponentiation - Fast way to calculate a^n using Divide and Conquer in O(log(n)) time
//Method 1 : Recursive
long long binpower(long long a, long long b)
{
    if (b == 0)
        return 1; //base case
    long long res = binpower(a, b / 2);
    if (b % 2 == 1)
        return res * res * a; //a^n==a*(a^(n/2))^2 if n is odd
    else
        return res * res; //a^n==(a^(n/2))^2 if n is even
}
//Method 2: Iterative (a bit faster)
long long binpower(long long a, long long b)
{
    long long res = 1;
    while (b > 0)
    {
        if (b & 1)
        { //checks if b is odd by checking whether the last bit is set
            res = res * a;
        }
        a = a * a;
        b >>= 1; //right shift operator - implies division by 2
    }
    return res;
}



//2. Finding (x^n)mod(m) when x^n is very large - direct application of this is in finding modular multiplicative inverse of a number
long long binpowermod(long long a, long long b, long long m)
{
    a %= m;
    long long res = 1;
    while (b > 0)
    {
        if (b & 1)
        { //checks if b is odd by checking whether the last bit is set
            res = (res * a) % m;
        }
        a = (a * a) % m;
        b >>= 1; //right shift operator - implies division by 2
    }
    return res;
}
// Application 1: modular multiplicative inverse x of a such that a.x≡1mod(m) is given by the formula:
//               x=binpowermod(a,f(m)-1,m) where f(m) is Euler's Totient function of m [if gcd(a,m)=1]
//               x=binpowermod(a,m-2,m) if m is a prime [from Fermat's little theorem]
// Application 2: Calculating nCr%(m) using modular multiplicative inverse in O(n) time
//               Formula : (nCr)%(m)=((factorial(n)%m)*binpowermod(factorial(r),f(m)-1,m)*binpowermod(factorial(n-r),f(m)-1,m))%m
//               [f(m)=Totient function]



//3. Prime factorization in O(√n) time
void primeFactorize(int n)
{
    for (int factor = 2; factor * factor <= n; factor++)
    {
        int count = 0;
        while (n % factor == 0)
        {
            n = n / factor;
            count++;
        }
        printf("%d %d", factor, count);
    }
}
//Application 1: Calculating f(n)=Euler's Totient function in O(√n) time
int totientFunction(int n)
{
    int result = n; //final result
    for (int factor = 2; factor * factor <= n; factor++)
    {
        if (n % factor == 0) //if factor is actually a divisor of n
        {
            result = result * (factor - 1);
            result = result / factor;
            while (n % factor == 0)
            {
                n = n / factor;
            }
        }
    }
    if (n > 1)
    {
        result = result / n;
    }
    return result;
}
//Application 2 : Sum of all proper divisors of a number
int divSum(int num)
{
    // Final result of summation of divisors
    int result = 0;

    // find all divisors which divides 'num'
    for (int i = 2; i <= sqrt(num); i++)
    {
        // if 'i' is divisor of 'num'
        if (num % i == 0)
        {
            // if both divisors are same then add
            // it only once else add both
            if (i == (num / i))
                result += i;
            else
                result += (i + num / i);
        }
    }

    // Add 1 to the result as 1 is also a divisor
    return (result + 1);
}



//4. Sieve of Eratosthenes to find all prime numbers between 1 to a given n
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));

    for (int p = 2; p * p <= n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p greater than or
            // equal to the square of it
            // numbers which are multiple of p and are
            // less than p^2 are already been marked.
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }

    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (prime[p])
            printf("%d ", p);
}
// Applications  : Finding prime factors of a number and multiple questions involving primes



//5. Finding factorial of a large number using arrays
void factorial(int n)
{
    int a[500],counter,temp,i;
    a[0]=1;
    counter=0;
    
    for(; n>=2; n--)
    {
        temp=0;
        for(i=0; i<=counter; i++)
        {
            temp=(a[i]*n)+temp;
            a[i]=temp%10;
            temp=temp/10;
        }
        while(temp>0)
        {
            a[++counter]=temp%10;
            temp=temp/10;
        }
    }
    for(i=counter; i>=0; i--)
        printf("%d",a[i]);
}
